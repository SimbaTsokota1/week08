name: Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: "Name of the AKS Cluster to deploy to"
        required: true
      resource_group:
        description: "Resource Group of the AKS Cluster"
        required: true
      acr_name:
        description: "Azure Container Registry name"
        required: true
      product_service_ip:
        description: "External IP of Product Service (e.g., http://X.X.X.X:8000)"
        required: true
      order_service_ip:
        description: "External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)"
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.resource_group }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}

      - name: Log in to ACR
        run: |
          az acr login --name ${{ github.event.inputs.acr_name }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ github.event.inputs.acr_name }}.azurecr.io/product-service:latest ./product-service
          docker push ${{ github.event.inputs.acr_name }}.azurecr.io/product-service:latest

          docker build -t ${{ github.event.inputs.acr_name }}.azurecr.io/order-service:latest ./order-service
          docker push ${{ github.event.inputs.acr_name }}.azurecr.io/order-service:latest

      - name: Deploy manifests
        run: |
          kubectl apply -f k8s/

      - name: Show external service endpoints
        run: |
          echo "Product Service: ${{ github.event.inputs.product_service_ip }}"
          echo "Order Service: ${{ github.event.inputs.order_service_ip }}"
